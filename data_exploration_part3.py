# -*- coding: utf-8 -*-
"""Data_Exploration_Part3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1REo6jRtI85aWfxSdjy0pvpo8jLu6B_RE

The data set contains the data regarding several taxi trips and its duration in New York City. I will now try and apply different techniques of Data Analysis to get insights about the data and determine how different variables  such as **TOTAL_AMOUNT** (dependent variable) are dependent on the target variable **Trip Distance and PASSENGER_COUNT**

We read the dataset into the DataFrame df and will have a look at the shape , columns , column data types and the first 5 rows of the data. This will give a brief overview of the data at hand.
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd /content/drive

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
sns.set()
PATH = 'My Drive/data_exploration/yellow_tripdata_2019-02.csv'
df = pd.read_csv(PATH)
print(df)

"""From the data frame we observe that,the rows are trips and columns are the features related to each trip."""

df.head()  #gives the first five rows of data set with all entries/information

#it gives the data types of all the columns
df.dtypes

"""Hereâ€™s what we know about the columns:

**Demographic information of Customer & Vendor**
   

**vendor_id** : a code indicating the provider associated with the trip record

**passenger_count** : the number of passengers in the vehicle (driver entered value)




"""

df.info()

df.columns #it gives a list of all the columns that are actually attributes of each trip

"""**Information about the Trip**


**store_and_fwd_flag** : This flag indicates whether the trip record was held in vehicle memory before sending to the vendor because the vehicle did not have a connection to the server (Y=store and forward; N=not a store and forward trip)

**trip_distance** : (target) distnce of the trip in kilometre
Thus we have a data set with 994380 rows and 18 columns. There are 17 features and 2 target variable which are trip_distance and passenger_count

This gives us a list of renamed column labels.It is optional,when the label gets to complicated or long we can rename them.
"""

df.isnull  #checks if any null value is present

df.fillna(0)

#it gives the no. of rows and columns
df.shape

#it tells about  the numerical columns with all statistical info
df.describe()

"""Some observations about the data:

The column vendor_id is nominal.

The columns pickup_datetime and dropoff_datetime are stored as object which must be converted to datetime for better analysis.

The column store_and_fwd_flag is categorical

***The returned table gives certain insights***:

There are no numerical columns with missing data

The passenger count varies between 1 and 9 with most people number of people being 1 or 2

The trip distance varying from 0km to 701.5 km. There are definitely some outliers present which must be treated.



Lets have a quick look at the non-numerical columns,
non_num_cols=
"""

df.sort_index()





non_num_cols=['tpep_pickup_datetime','tpep_dropoff_datetime','store_and_fwd_flag']
print(df[non_num_cols].count())

"""This shows that the non-numerical columns don't have any null values

The 2 columns tpep_pickup_datetime and tpep_dropoff_datetime are now converted to datetime format which makes analysis of date and time data much more easier.
"""

df['tpep_pickup_datetime']=pd.to_datetime(df['tpep_pickup_datetime'])
df['tpep_dropoff_datetime']=pd.to_datetime(df['tpep_dropoff_datetime'])

df.info()

df['duration']=(df['tpep_dropoff_datetime'] - df['tpep_pickup_datetime']).dt.total_seconds()
print(df['duration'])

sns.distplot(df['passenger_count'],kde=False,color='black')
plt.title('Distribution of Passenger Count',color='blue')
plt.ylabel('NO. OF TRIPS')
plt.show()

"""Here we see that the mostly 1 or 2 passengers avail the cab. The instance of large group of people travelling together is rare.

In this analysis our purpose is to predict **fare_amount**.We know that the taxis generally charge a fixed initial fee that is based on**"per km distance"** ***(trip_distance***),**"per minute"**(trip_duration).We have  column of trip_distance  but not a column of trip_duration. But we have **pickup time** and **drop_off time**.So we can find the duration of the trip
"""

df['tpep_pickup_day']=df['tpep_pickup_datetime'].dt.day_name()
df['tpep_dropoff_day']=df['tpep_dropoff_datetime'].dt.day_name()

"""We convert the dates into days of the week ,in order to check that which days of the week have more no. of passengers."""

df['tpep_pickup_day'].value_counts()

"""This shows the distribuion of passengers on different days of the week.There may be various reasons as **SUNDAY** is a weekend day thus people go on outings."""

df['tpep_dropoff_day'].value_counts()

"""This shows that the maximum passengers have availed the taxi on **FRIDAY** and least on **SUNDAY**

The distribution of trip duration with the days of the week is something to look into as well.
"""

figure,ax=plt.subplots(nrows=2,ncols=1,figsize=(10,10))
sns.countplot(x='tpep_pickup_day',data=df,ax=ax[0])
ax[0].set_title('Number of Pickups done on each day of the week',color='green')
sns.countplot(x='tpep_dropoff_day',data=df,ax=ax[1])
ax[1].set_title('Number of dropoffs done on each day of the week',color='green')
plt.tight_layout()

plt.plot(df['passenger_count'],df['fare_amount'],linewidth=2,color='red')
plt.title('Distribution of fare_amount w.r.t passenger_count',color='blue')
plt.xlim(0,9)
plt.ylim(0,700000)
plt.margins(x=2,y=1)
plt.tight_layout()

figure,ax=plt.subplots(nrows=1,ncols=2,figsize=(12,5))
df['pickup_hour']=df['tpep_pickup_datetime'].dt.hour
df.pickup_hour.hist(bins=24,ax=ax[0])
ax[0].set(title='Distribution of pickup hours',ylabel='No. of pickups',xlabel='pickup_hours')
df['dropoff_hour']=df['tpep_dropoff_datetime'].dt.hour
df.dropoff_hour.hist(bins=24,ax=ax[1])
ax[1].set(title='Distribution of dropoff hours',xlabel='dropoff_hour',ylabel='No. of dropoffs')

"""**This shows DISTRIBUTION OF PICKUPS & DROPOFFS IN 4 PARTS OF A DAY**

The 2 distributions are almost similar and are also aligned with the division of the hours of the day into 4 parts 'MORNING','AFTERNOON','EVENING',LATE NIGHT' and their distribution,with respect to no. ofpickup and dropoffs.

This way we can find a new column of time duration of the trip,using pickup and dropoff time.This column **'duration'** is a series of trip duration in seconds

**Distribution of the stored and forward flag**
"""

df['store_and_fwd_flag'].value_counts()  #This counts the value of STORE AND FORWARD FLAG i.e Y & N

"""The **number of N flag is much larger** **as compared to Y flag.** We can see whether they have any relation with the duration of the trip.

**Distribution of the trip distance**
"""

sns.distplot(df['trip_distance'],kde=False,color='black')
plt.title('The distribution of of the Pick Up  Distace distribution')
plt.xlabel('trip_distance',color='blue')
plt.ylabel('no. of pickups',color='blue')

"""There are outliers. Lets see the boxplot of this variable."""

sns.boxplot(df['trip_distance'], orient='horizontal')
plt.title('A boxplot depicting the pickup distance distribution',color='blue')
plt.xlabel('trip_distance',color='red')

"""Thus we see there is **only two-three values near 200-300** while all the others are somewhere between **0 and 150**. The ones near **700 ,200-300 are definitely an outlier which must be treated.**

Lets have a look at the 10 largest value of trip_duration.
"""

print( df['trip_distance'].nlargest(10))

"""***THIS VERIFIES THE ABOVE BOXPLOT ***

The largest value is much greater than the 2nd and 3rd largest trip duration value. This might be because of some errors which typically occurs during data collection or this might be a legit data. Since the occurrence of such a huge value is unlikely so its better to drop this row before further analysis.
"""

df=df[df.trip_distance!=df.trip_distance.max()]

"""Lets have a look at the distribution of the trip_duration after we have dropped the outlier."""

sns.distplot(df['trip_distance'])
plt.title('Distribution of the pickup distance after the treatment of outliers')

"""**Distribution of vendor_id**"""

df['VendorID'].hist(bins=3)

"""**Conclusion about Trip Distance and the data set:**
Trip Distance varies a lot ranging from metres to more than 700 km
1.Most trips are taken on Friday , Saturday and Thursday

The average duration of a trip is most on Thursday and Friday as trips longer 
than 5 hours are mostly taken in these days

The average distance of trips started in between 100 km and 150 km is the 
largest.

Vendor 2 mostly provides the longer trips



"""